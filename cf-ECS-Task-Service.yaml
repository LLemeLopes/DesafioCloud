AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy Service
Parameters:
  NetworkStackName:
    Type: String
    Description: Nome da stack de rede ja criada
    Default : NetworkStack
  
  ClusterStackName:
    Type: String
    Description: Nome da stack de Cluster ja criada
    Default : ClusterStack
 
  StackName:
    Type: String
    Description: Nome do ambiente que sera prefixo para os nomes dos recursos criados
 
  
  ServiceName:
    Type: String
    Description: Informar o nome da aplicacao
    
  ImageUrl:
    Type: String
    Description: O URL de uma imagem do Docker que contém o processo de aplicativo que
                  lidará com o tráfego para este serviço
  
  ContainerPort:
    Type: Number
    Default: 80
    Description: Qual numero da porta que a aplicacao fara binding dentro do Docker
  
  ContainerCpu:
    Type: Number
    Default: 256
    Description: Quantidade de CPU para o Container. 1024 e 1 CPU
  
  ContainerMemory:
    Type: Number
    Default: 512
    Description: Quantidade de memoria em megabytes para o Container
  
  Path:
    Type: String
    Default: "*"
    Description: Um caminho no balanceador de carga que este serviço
                  deve estar conectado. Use * para enviar todo o balanceador de carga
                  tráfego para este serviço.
  Priority:
    Type: Number
    Default: 1
    Description: A prioridade para a regra de roteamento adicionada ao balanceador de carga.
                  Isso se aplica apenas se você tiver vários serviços que foram
                  atribuído a diferentes caminhos no balanceador de carga.
      
  DesiredCount:
    Type: Number
    Default: 2    
  MinContainers:
    Type: Number
    Default: 1
  # for autoscaling
  MaxContainers:
    Type: Number
    Default: 10
  # target CPU utilization (%)
  AutoScalingTargetValue:
    Type: Number
    Default: 50
  
  ALBTgName:
    Type: String
    Description: O nome para o TargetGroup
  
  LoadBalancerIdleTimeout:
    Description: 'O valor do tempo limite inativo, em segundos.'
    Type: Number
    Default: 60
    MinValue: 1
    MaxValue: 4000
    
Resources: 
ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['', [!Ref ServiceName, ExecutionRole]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
  # A role for the containers
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['', [!Ref ServiceName, TaskRole]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      # ManagedPolicyArns:
      #   -
      # Policies:
      #   -
  # A role needed for auto scaling
  AutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['', [!Ref ServiceName, AutoScalingRole]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole'
  
    
InstanceSecurityGroup:
  Type: AWS::EC2::SecurityGroup
  Properties:
      GroupDescription: Allow http to client host
      VpcId: {'Fn::ImportValue': !Sub '${NetworkStackName}-VPCID'}
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: !ref 'ContainerPort'
        ToPort: !ref 'ContainerPort'
        CidrIp: 0.0.0.0/0

TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref 'ServiceName'
      Cpu: !Ref 'ContainerCpu'
      Memory: !Ref 'ContainerMemory'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref 'ExecutionRole'
      TaskRoleArn: !Ref 'TaskRole'
      ContainerDefinitions:
        - Name: !Ref 'ServiceName'
          Cpu: !Ref 'ContainerCpu'
          Memory: !Ref 'ContainerMemory'
          Image: !Ref 'ImageUrl'
          PortMappings:
            - ContainerPort: !Ref 'ContainerPort'
      Tags:
        - Key: Name
          Value: !Ref 'StackName'

        
Service:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerRule
    Properties:
      ServiceName: !Ref 'ServiceName'
      Cluster: {'Fn::ImportValue': !Sub '${ClusterStackName}-Cluster'}
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref 'DesiredCount'
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups: !Ref 'InstanceSecurityGroup' 
          Subnets: 
            - {'Fn::ImportValue': !Sub '${NetworkStackName}-AZ1'}
            - {'Fn::ImportValue': !Sub '${NetworkStackName}-AZ2'}
          
      TaskDefinition: !Ref 'TaskDefinition'
      LoadBalancers:
        - ContainerName: !Ref 'ServiceName'
          ContainerPort: !Ref 'ContainerPort'
          TargetGroupArn: !Ref 'DefaultTargetGroup'
   
   DefaultTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip
      Name: !Ref 'ALBTgName'
      Port: !Ref 'ContainerPort'
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: {'Fn::ImportValue': !Sub '${NetworkStackName}-VPCID'}
	  		
  HttpListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
      - TargetGroupArn: !Ref DefaultTargetGroup
        Type: forward
      LoadBalancerArn: {'Fn::ImportValue': !Sub '${ClusterStackName}-LoadBalancer'}
      Port: !Ref 'ContainerPort'
      Protocol: HTTP	  
	  
  LoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'DefaultTargetGroup'
          Type: 'forward'
      Conditions:
        - Field: path-pattern
          Values: [!Ref 'Path']
      ListenerArn: {'Fn::ImportValue': !Sub '${ClusterStackName}-LoadBalancer'}
      Priority: !Ref 'Priority'	  
  
  AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: !Ref MinContainers
      MaxCapacity: !Ref MaxContainers
      ResourceId: !Join ['/', [service, {'Fn::ImportValue': !Sub '${ClusterStackName}-Cluster'}, !GetAtt Service.Name]]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !GetAtt AutoScalingRole.Arn
  
  AutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Join ['', [!Ref ServiceName, AutoScalingPolicy]]
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 10
        ScaleOutCooldown: 10
        TargetValue: !Ref AutoScalingTargetValue